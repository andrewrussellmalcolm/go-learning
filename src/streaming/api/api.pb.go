// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package streamingservice is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Void
	Frame
*/
package streamingservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Frame struct {
	Index   int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Frame) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Frame) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "streamingservice.Void")
	proto.RegisterType((*Frame)(nil), "streamingservice.Frame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamingService service

type StreamingServiceClient interface {
	GetStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (StreamingService_GetStreamClient, error)
}

type streamingServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamingServiceClient(cc *grpc.ClientConn) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) GetStream(ctx context.Context, in *Void, opts ...grpc.CallOption) (StreamingService_GetStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamingService_serviceDesc.Streams[0], c.cc, "/streamingservice.StreamingService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingService_GetStreamClient interface {
	Recv() (*Frame, error)
	grpc.ClientStream
}

type streamingServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *streamingServiceGetStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamingService service

type StreamingServiceServer interface {
	GetStream(*Void, StreamingService_GetStreamServer) error
}

func RegisterStreamingServiceServer(s *grpc.Server, srv StreamingServiceServer) {
	s.RegisterService(&_StreamingService_serviceDesc, srv)
}

func _StreamingService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServiceServer).GetStream(m, &streamingServiceGetStreamServer{stream})
}

type StreamingService_GetStreamServer interface {
	Send(*Frame) error
	grpc.ServerStream
}

type streamingServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *streamingServiceGetStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamingservice.StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _StreamingService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd, 0xcc, 0x4b,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x55, 0x62, 0xe3, 0x62, 0x09, 0xcb, 0xcf, 0x4c, 0x51,
	0x32, 0xe7, 0x62, 0x75, 0x2b, 0x4a, 0xcc, 0x4d, 0x15, 0x12, 0xe1, 0x62, 0xcd, 0xcc, 0x4b, 0x49,
	0xad, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0x70, 0x84, 0x24, 0xb8, 0xd8, 0x0b, 0x12,
	0x2b, 0x73, 0xf2, 0x13, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0x60, 0x5c, 0xa3, 0x10,
	0x2e, 0x81, 0x60, 0x98, 0xa1, 0xc1, 0x10, 0x43, 0x85, 0x1c, 0xb8, 0x38, 0xdd, 0x53, 0x4b, 0x20,
	0xc2, 0x42, 0x62, 0x7a, 0xe8, 0x96, 0xea, 0x81, 0x6c, 0x94, 0x12, 0xc7, 0x14, 0x07, 0xbb, 0x40,
	0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x5e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66,
	0x36, 0xba, 0xfc, 0xbc, 0x00, 0x00, 0x00,
}
