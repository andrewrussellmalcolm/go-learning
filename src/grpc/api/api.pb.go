// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package taskservice is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Void
	Owner
	Task
	TaskList
*/
package taskservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Owner struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *Owner) Reset()                    { *m = Owner{} }
func (m *Owner) String() string            { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()               {}
func (*Owner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Owner) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Owner) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Owner) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Task struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Owner       *Owner `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Task) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

type TaskList struct {
	Task []*Task `protobuf:"bytes,1,rep,name=task" json:"task,omitempty"`
}

func (m *TaskList) Reset()                    { *m = TaskList{} }
func (m *TaskList) String() string            { return proto.CompactTextString(m) }
func (*TaskList) ProtoMessage()               {}
func (*TaskList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskList) GetTask() []*Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "taskservice.Void")
	proto.RegisterType((*Owner)(nil), "taskservice.Owner")
	proto.RegisterType((*Task)(nil), "taskservice.Task")
	proto.RegisterType((*TaskList)(nil), "taskservice.TaskList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Void, error)
	GetTaskList(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TaskList, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Void, error)
	DeleteTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Void, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/taskservice.TaskService/AddTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskList(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := grpc.Invoke(ctx, "/taskservice.TaskService/GetTaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/taskservice.TaskService/UpdateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/taskservice.TaskService/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	AddTask(context.Context, *Task) (*Void, error)
	GetTaskList(context.Context, *Void) (*TaskList, error)
	UpdateTask(context.Context, *Task) (*Void, error)
	DeleteTask(context.Context, *Task) (*Void, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskservice.TaskService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AddTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskservice.TaskService/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskList(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskservice.TaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskservice.TaskService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taskservice.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskService_AddTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _TaskService_GetTaskList_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0xee, 0xa6, 0x49, 0xb5, 0xb3, 0x28, 0x38, 0x28, 0x84, 0x9e, 0xc2, 0x82, 0x90, 0x53, 0xa0,
	0xb1, 0x17, 0x8f, 0x05, 0xc1, 0x8b, 0x20, 0xc4, 0x9f, 0xfb, 0xb6, 0x3b, 0x87, 0xa1, 0x6d, 0x36,
	0x64, 0x17, 0x7d, 0x64, 0x5f, 0x43, 0x76, 0x23, 0xd2, 0x92, 0x53, 0x6f, 0x3b, 0xdf, 0x7c, 0x7f,
	0xec, 0xc0, 0x5c, 0x77, 0x5c, 0x75, 0xbd, 0xf5, 0x16, 0xa5, 0xd7, 0x6e, 0xe7, 0xa8, 0xff, 0xe2,
	0x2d, 0xa9, 0x19, 0xa4, 0x9f, 0x96, 0x8d, 0x5a, 0x43, 0xf6, 0xfa, 0xdd, 0x52, 0x8f, 0xd7, 0x90,
	0xb0, 0xc9, 0x45, 0x21, 0xca, 0xab, 0x26, 0x61, 0x83, 0x08, 0x69, 0xab, 0x0f, 0x94, 0x27, 0x85,
	0x28, 0xe7, 0x4d, 0x7c, 0xe3, 0x2d, 0x64, 0x74, 0xd0, 0xbc, 0xcf, 0xa7, 0x11, 0x1c, 0x06, 0xb5,
	0x81, 0xf4, 0x5d, 0xbb, 0xdd, 0xc8, 0xa1, 0x00, 0x69, 0xc8, 0x6d, 0x7b, 0xee, 0x3c, 0xdb, 0xf6,
	0xcf, 0xe8, 0x18, 0xc2, 0x12, 0x32, 0x1b, 0xc2, 0xa3, 0x9f, 0xac, 0xb1, 0x3a, 0x6a, 0x58, 0xc5,
	0x5a, 0xcd, 0x40, 0x50, 0x4b, 0xb8, 0x0c, 0x19, 0x2f, 0xec, 0x3c, 0xde, 0x43, 0x1a, 0x78, 0xb9,
	0x28, 0xa6, 0xa5, 0xac, 0x6f, 0x4e, 0x44, 0x81, 0xd4, 0xc4, 0x75, 0xfd, 0x23, 0x40, 0x86, 0xf1,
	0x6d, 0x58, 0xe1, 0x12, 0x2e, 0xd6, 0xc6, 0xc4, 0xa6, 0x63, 0xcd, 0xe2, 0x14, 0x8a, 0x5f, 0x33,
	0xc1, 0x47, 0x90, 0xcf, 0xe4, 0xff, 0x83, 0xc7, 0x9c, 0xc5, 0xdd, 0xc8, 0x29, 0x30, 0xd5, 0x04,
	0x57, 0x00, 0x1f, 0x9d, 0xd1, 0x9e, 0xce, 0x0a, 0x5c, 0x01, 0x3c, 0xd1, 0x9e, 0xce, 0x53, 0x6d,
	0x66, 0xf1, 0xbe, 0x0f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x67, 0x2f, 0xe6, 0x6c, 0xec, 0x01,
	0x00, 0x00,
}
