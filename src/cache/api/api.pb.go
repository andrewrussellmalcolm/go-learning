// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package cacheservice is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Measurement
	PutMeasurementRequest
	GetMeasurementRequest
	GetMeasurementResponse
	Void
*/
package cacheservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// describes a measurement [value,sensor,time]
type Measurement struct {
	SensorLocationID uint64 `protobuf:"varint,1,opt,name=sensorLocationID" json:"sensorLocationID,omitempty"`
	Value            int64  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Timestamp        int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Measurement) Reset()                    { *m = Measurement{} }
func (m *Measurement) String() string            { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()               {}
func (*Measurement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Measurement) GetSensorLocationID() uint64 {
	if m != nil {
		return m.SensorLocationID
	}
	return 0
}

func (m *Measurement) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Measurement) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// put one or more measurements
type PutMeasurementRequest struct {
	Measurement []*Measurement `protobuf:"bytes,2,rep,name=measurement" json:"measurement,omitempty"`
}

func (m *PutMeasurementRequest) Reset()                    { *m = PutMeasurementRequest{} }
func (m *PutMeasurementRequest) String() string            { return proto.CompactTextString(m) }
func (*PutMeasurementRequest) ProtoMessage()               {}
func (*PutMeasurementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutMeasurementRequest) GetMeasurement() []*Measurement {
	if m != nil {
		return m.Measurement
	}
	return nil
}

// get one or more measurements from a given sensor in time window
type GetMeasurementRequest struct {
	SensorLocationID uint64 `protobuf:"varint,1,opt,name=sensorLocationID" json:"sensorLocationID,omitempty"`
	TimestampStart   int64  `protobuf:"varint,2,opt,name=timestampStart" json:"timestampStart,omitempty"`
	TimestampFinish  int64  `protobuf:"varint,3,opt,name=timestampFinish" json:"timestampFinish,omitempty"`
}

func (m *GetMeasurementRequest) Reset()                    { *m = GetMeasurementRequest{} }
func (m *GetMeasurementRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMeasurementRequest) ProtoMessage()               {}
func (*GetMeasurementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetMeasurementRequest) GetSensorLocationID() uint64 {
	if m != nil {
		return m.SensorLocationID
	}
	return 0
}

func (m *GetMeasurementRequest) GetTimestampStart() int64 {
	if m != nil {
		return m.TimestampStart
	}
	return 0
}

func (m *GetMeasurementRequest) GetTimestampFinish() int64 {
	if m != nil {
		return m.TimestampFinish
	}
	return 0
}

type GetMeasurementResponse struct {
	Measurement []*Measurement `protobuf:"bytes,1,rep,name=measurement" json:"measurement,omitempty"`
}

func (m *GetMeasurementResponse) Reset()                    { *m = GetMeasurementResponse{} }
func (m *GetMeasurementResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMeasurementResponse) ProtoMessage()               {}
func (*GetMeasurementResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetMeasurementResponse) GetMeasurement() []*Measurement {
	if m != nil {
		return m.Measurement
	}
	return nil
}

// use when no explicit request/response required
type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Measurement)(nil), "cacheservice.Measurement")
	proto.RegisterType((*PutMeasurementRequest)(nil), "cacheservice.PutMeasurementRequest")
	proto.RegisterType((*GetMeasurementRequest)(nil), "cacheservice.GetMeasurementRequest")
	proto.RegisterType((*GetMeasurementResponse)(nil), "cacheservice.GetMeasurementResponse")
	proto.RegisterType((*Void)(nil), "cacheservice.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CacheService service

type CacheServiceClient interface {
	// possible errors : time out of range, unknown sensor (or just return empty response?)
	GetMeasurement(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error)
	// possible errors : cache full (or fail silently?)
	PutMeasurement(ctx context.Context, in *PutMeasurementRequest, opts ...grpc.CallOption) (*Void, error)
	// for bulk upload at init time
	PutMeasurementStream(ctx context.Context, opts ...grpc.CallOption) (CacheService_PutMeasurementStreamClient, error)
	// alternative for queries returning repeated data
	GetMeasurementStream(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (CacheService_GetMeasurementStreamClient, error)
}

type cacheServiceClient struct {
	cc *grpc.ClientConn
}

func NewCacheServiceClient(cc *grpc.ClientConn) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) GetMeasurement(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error) {
	out := new(GetMeasurementResponse)
	err := grpc.Invoke(ctx, "/cacheservice.CacheService/GetMeasurement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) PutMeasurement(ctx context.Context, in *PutMeasurementRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/cacheservice.CacheService/PutMeasurement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) PutMeasurementStream(ctx context.Context, opts ...grpc.CallOption) (CacheService_PutMeasurementStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CacheService_serviceDesc.Streams[0], c.cc, "/cacheservice.CacheService/PutMeasurementStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheServicePutMeasurementStreamClient{stream}
	return x, nil
}

type CacheService_PutMeasurementStreamClient interface {
	Send(*Measurement) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type cacheServicePutMeasurementStreamClient struct {
	grpc.ClientStream
}

func (x *cacheServicePutMeasurementStreamClient) Send(m *Measurement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheServicePutMeasurementStreamClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheServiceClient) GetMeasurementStream(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (CacheService_GetMeasurementStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CacheService_serviceDesc.Streams[1], c.cc, "/cacheservice.CacheService/GetMeasurementStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheServiceGetMeasurementStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CacheService_GetMeasurementStreamClient interface {
	Recv() (*Measurement, error)
	grpc.ClientStream
}

type cacheServiceGetMeasurementStreamClient struct {
	grpc.ClientStream
}

func (x *cacheServiceGetMeasurementStreamClient) Recv() (*Measurement, error) {
	m := new(Measurement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CacheService service

type CacheServiceServer interface {
	// possible errors : time out of range, unknown sensor (or just return empty response?)
	GetMeasurement(context.Context, *GetMeasurementRequest) (*GetMeasurementResponse, error)
	// possible errors : cache full (or fail silently?)
	PutMeasurement(context.Context, *PutMeasurementRequest) (*Void, error)
	// for bulk upload at init time
	PutMeasurementStream(CacheService_PutMeasurementStreamServer) error
	// alternative for queries returning repeated data
	GetMeasurementStream(*GetMeasurementRequest, CacheService_GetMeasurementStreamServer) error
}

func RegisterCacheServiceServer(s *grpc.Server, srv CacheServiceServer) {
	s.RegisterService(&_CacheService_serviceDesc, srv)
}

func _CacheService_GetMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheservice.CacheService/GetMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetMeasurement(ctx, req.(*GetMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_PutMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).PutMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheservice.CacheService/PutMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).PutMeasurement(ctx, req.(*PutMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_PutMeasurementStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServiceServer).PutMeasurementStream(&cacheServicePutMeasurementStreamServer{stream})
}

type CacheService_PutMeasurementStreamServer interface {
	SendAndClose(*Void) error
	Recv() (*Measurement, error)
	grpc.ServerStream
}

type cacheServicePutMeasurementStreamServer struct {
	grpc.ServerStream
}

func (x *cacheServicePutMeasurementStreamServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheServicePutMeasurementStreamServer) Recv() (*Measurement, error) {
	m := new(Measurement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CacheService_GetMeasurementStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMeasurementRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServiceServer).GetMeasurementStream(m, &cacheServiceGetMeasurementStreamServer{stream})
}

type CacheService_GetMeasurementStreamServer interface {
	Send(*Measurement) error
	grpc.ServerStream
}

type cacheServiceGetMeasurementStreamServer struct {
	grpc.ServerStream
}

func (x *cacheServiceGetMeasurementStreamServer) Send(m *Measurement) error {
	return x.ServerStream.SendMsg(m)
}

var _CacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cacheservice.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeasurement",
			Handler:    _CacheService_GetMeasurement_Handler,
		},
		{
			MethodName: "PutMeasurement",
			Handler:    _CacheService_PutMeasurement_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutMeasurementStream",
			Handler:       _CacheService_PutMeasurementStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMeasurementStream",
			Handler:       _CacheService_GetMeasurementStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xdd, 0x4a, 0x02, 0x41,
	0x14, 0x76, 0xd4, 0x04, 0x8f, 0x62, 0x71, 0xd0, 0xd8, 0xa4, 0x0b, 0x99, 0x22, 0x96, 0x2e, 0x24,
	0xec, 0xb2, 0xcb, 0xa2, 0x90, 0x0a, 0x42, 0xab, 0x8b, 0xa0, 0x8b, 0x69, 0x3b, 0xe0, 0x40, 0xb3,
	0xb3, 0xcd, 0xcc, 0xfa, 0x26, 0x3d, 0x60, 0x6f, 0x12, 0xfe, 0xa0, 0x3b, 0xdb, 0x1a, 0x79, 0xb9,
	0xdf, 0x7e, 0xe7, 0xfb, 0x39, 0x87, 0x81, 0xba, 0x48, 0x64, 0x3f, 0x31, 0xda, 0x69, 0x6c, 0x46,
	0x22, 0x9a, 0x90, 0x25, 0x33, 0x95, 0x11, 0x71, 0x05, 0x8d, 0x7b, 0x12, 0x36, 0x35, 0xa4, 0x28,
	0x76, 0x78, 0x0a, 0x7b, 0x96, 0x62, 0xab, 0xcd, 0x9d, 0x8e, 0x84, 0x93, 0x3a, 0x1e, 0x5e, 0x05,
	0xac, 0xc7, 0xc2, 0xea, 0xe8, 0x17, 0x8e, 0x6d, 0xd8, 0x99, 0x8a, 0x8f, 0x94, 0x82, 0x72, 0x8f,
	0x85, 0x95, 0xd1, 0xe2, 0x03, 0x0f, 0xa1, 0xee, 0xa4, 0x22, 0xeb, 0x84, 0x4a, 0x82, 0xca, 0xfc,
	0xcf, 0x1a, 0xe0, 0x8f, 0xd0, 0x79, 0x48, 0x5d, 0xc6, 0x71, 0x44, 0x9f, 0x29, 0x59, 0x87, 0x17,
	0xd0, 0x50, 0x6b, 0x34, 0x28, 0xf7, 0x2a, 0x61, 0x63, 0x70, 0xd0, 0xcf, 0x66, 0xed, 0x67, 0xc7,
	0xb2, 0x6c, 0xfe, 0xc5, 0xa0, 0x73, 0x43, 0x45, 0xb2, 0xdb, 0xf4, 0x39, 0x81, 0xd6, 0x2a, 0xe8,
	0xd8, 0x09, 0xe3, 0x96, 0xc5, 0x72, 0x28, 0x86, 0xb0, 0xbb, 0x42, 0xae, 0x65, 0x2c, 0xed, 0x64,
	0xd9, 0x33, 0x0f, 0xf3, 0x27, 0xd8, 0xcf, 0xc7, 0xb2, 0x89, 0x8e, 0x2d, 0xe5, 0xeb, 0xb2, 0xad,
	0xea, 0xd6, 0xa0, 0xfa, 0xac, 0xe5, 0xfb, 0xe0, 0xbb, 0x0c, 0xcd, 0xcb, 0xd9, 0xc4, 0x78, 0x31,
	0x81, 0xaf, 0xd0, 0xf2, 0xfd, 0xf0, 0xc8, 0x97, 0x2c, 0x5c, 0x52, 0xf7, 0xf8, 0x6f, 0xd2, 0x22,
	0x32, 0x2f, 0xe1, 0x2d, 0xb4, 0xfc, 0xe3, 0xe5, 0xe5, 0x0b, 0x4f, 0xdb, 0x45, 0x9f, 0x34, 0x8b,
	0xce, 0x4b, 0x38, 0x84, 0xb6, 0x4f, 0x1f, 0x3b, 0x43, 0x42, 0xe1, 0xe6, 0x25, 0x14, 0x0b, 0x85,
	0x0c, 0x5f, 0xa0, 0xed, 0x67, 0x5e, 0x4a, 0xfd, 0xab, 0xfc, 0x66, 0x3f, 0x5e, 0x3a, 0x63, 0x6f,
	0xb5, 0xf9, 0xa3, 0x39, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x65, 0xac, 0x30, 0x41, 0x03,
	0x00, 0x00,
}
